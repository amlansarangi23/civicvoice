// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  type       UserType @default(CITIZEN)
  localityId String
  locality   Locality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  issues     Issue[]  // One user can create multiple issues
}

enum UserType {
  CITIZEN
  ADMIN
}

model Locality {
  id      String  @id @default(uuid())
  name    String  @unique
  users   User[]  // A locality has multiple users
  issues  Issue[] // A locality has multiple issues
}

model Issue {
  id          String   @id @default(uuid())
  userId      String
  localityId  String
  createdAt   DateTime @default(now())
  subject     String
  tagId       String
  subTags     String[]
  description String
  isResolved  Boolean  @default(false)
  upvotes     Int      @default(0)
  adminReply  String?  // Nullable for unresolved issues

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  locality    Locality @relation(fields: [localityId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String  @id @default(uuid())
  title     String  @unique
  issues    Issue[] // One tag can have multiple issues
}

